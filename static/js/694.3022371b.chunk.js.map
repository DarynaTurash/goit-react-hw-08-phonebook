{"version":3,"file":"static/js/694.3022371b.chunk.js","mappings":"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","sources":["components/contactForm/contactForm.styled.js","components/contactList/contactList.styled.js","redux/contacts/selectors.js","components/contactList/contactList.jsx","components/contactForm/contactForm.jsx","components/filter/filter.styled.js","components/filter/filter.jsx","components/loader/loader.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikErrorMessage, Field } from 'formik';\n\nexport const Form = styled(FormikForm)`\ndisplay: flex;\nflex-direction: column;\ngap: 15px;\npadding: 25px;\nborder: 1px solid #2a2a2a;\nwidth: 375px;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\nbackground-color: #DE6363;\ncolor: white;\nborder-radius: 7px;\npadding: 5px 10px 5px 10px;\nmargin: 5px 0 5px 0;\nwidth: 353px;\n`;\n\nexport const FormField = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: 5px;\nfont-weight: 600;\n`;\n\nexport const FieldInput = styled(Field)`\nwidth: 340px;\npadding: 10px 15px 10px 15px;\n\n&:hover {\n    border-color: #317EC6;\n}\n\n&::placeholder {\n    opacity: 0.3;\n}\n`;\n\nexport const SubmitButton = styled.button`\nwidth: 375px;\npadding: 10px 10px 10px 10px;\nmargin-top: 15px;\nborder: 0;\nborder-radius: 7px;\nfont-weight: 600;\nbackground-color: #A2C2DF;\n\n&:hover {\n    background-color: #317EC6;\n    color: white;\n}\n\n`;\n\n\n\n","import styled from 'styled-components';\n\nexport const ListContainer = styled.div`\n    margin-top: 35px;\n    margin-left: 25px;\n`;\n\nexport const StyledList = styled.ul`\n    display: flex; \n    flex-direction: column;\n    gap: 20px; \n    margin: 0;\n    padding: 0;\n`;\n\nexport const Contact = styled.li`\n    display: flex;\n    justify-content: centre;\n    align-items: center;\n    gap: 20px;\n\n`;\n\nexport const Name = styled.p`\n    font-weight: 600;\n    font-size: 20px;\n    margin: 0;\n\n    &::before {\n        content: \"৹\";\n        margin-right: 10px;\n    }\n`;\n\nexport const Number = styled.p`\n    font-size: 17px;\n    margin: 0;\n`;\n\nexport const ButtonDelete = styled.button`\n    width: 70px;\n    margin-left: 15px;\n    padding: 7px 10px 7px 10px;\n    border: 0;\n    border-radius: 7px;\n    font-weight: 600;\n    background-color: #EFACAC;\n\n    &:hover {\n    background-color: #DA4949;\n    color: white;\n}\n`;\n","export const getContacts = state => state.contacts;\n\nexport const getFilterValue = state => state.filter;\n","import { ListContainer, StyledList, Contact, Name, ButtonDelete, Number } from \"./contactList.styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getFilterValue, getContacts} from \"redux/contacts/selectors\";\nimport { deleteContact } from \"redux/contacts/operations\";\n\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilterValue);\n    const contacts = useSelector(getContacts);\n    const visibleContacts = filter ? contacts.items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase())) : contacts.items;\n\n    return (\n        <ListContainer>\n            <StyledList>\n            {visibleContacts.map(contact => <Contact key={contact.id}>\n                    <Name>{contact.name}</Name>\n                    <Number>{contact.number}</Number>\n                    <ButtonDelete type='button' onClick={() => dispatch(deleteContact(contact.id))}>Delete</ButtonDelete>\n                </Contact>)}\n            </StyledList>\n        </ListContainer>\n    )\n};\n\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, ErrorMessage, FormField, FieldInput, SubmitButton } from './contactForm.styled';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\n\n\n\nconst validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d\\'Artagnan'\n      )\n      .required('Name is required'),\n      number: Yup.string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required('Phone number is required'),\n  });\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(getContacts);\n    \n  \n\n    return (\n        <Formik initialValues={{\n                    name: '', \n                    number: '',\n                }}\n                validationSchema={validationSchema}\n                \n                onSubmit={(values, action) => {\n                const contactExist = contacts.items.some(contact => contact.name.toLowerCase().includes(values.name.toLowerCase()));\n                const newContact = { ...values };\n\n                if(contactExist) {\n                  alert(`Sorry, contact name ${values.name} already exist`);\n                } else {\n                  dispatch(addContact(newContact));\n                  action.resetForm();\n                }\n                }}>\n        <Form>\n        <FormField>\n        Name\n        <FieldInput type=\"text\" name=\"name\" placeholder=\"Jacob Nillson\"  />\n        <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n        <FormField>\n        Number\n        <FieldInput type=\"tel\" name=\"number\" placeholder=\"11-22-33-44\" />\n        <ErrorMessage name=\"number\" component=\"div\" />\n        </FormField>\n        <SubmitButton type=\"submit\">Add contact</SubmitButton>\n      </Form>\n    </Formik>\n    );\n};\n\n\n\n\n\n\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\nwidth: 200px;\npadding: 7px 15px 7px 15px;\n\n\n&:hover {\n    border-color: #317EC6;\n}\n`;\n\nexport const FilterLabel = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\nmargin-left: 25px;\n`;","import { FilterInput, FilterLabel } from \"./filter.styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getFilterValue } from \"redux/contacts/selectors\";\nimport { setFilterValue } from \"redux/contacts/filterSlice\";\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilterValue);\n\n    return (\n        <FilterLabel>\n            Find contact by name\n            <FilterInput type='text' onChange={(e) => dispatch(setFilterValue(e.target.value))} value={filter} />\n        </FilterLabel>\n    );\n};\n\n","import { ThreeDots } from  'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n        <ThreeDots \n            height=\"80\" \n            width=\"80\" \n            radius=\"9\"\n            color=\"black\" \n            ariaLabel=\"three-dots-loading\"\n            wrapperStyle={{}}\n            wrapperClassName=\"\"\n            visible={true}\n             />\n    );\n};","import { React, useEffect } from 'react';\nimport { ContactList } from '../components/contactList/contactList';\nimport { ContactForm } from '../components/contactForm/contactForm';\nimport { Filter } from '../components/filter/filter';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { Loader } from '../components/loader/loader';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\nmax-width: 1230px;\npadding: 0 15px 0 15px;\nmargin: 0 auto 0 auto;\n`;\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const { items, isLoading, error } = useSelector(getContacts);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\nreturn (\n    <main>\n    <Container>\n    <h1>Phonebook</h1>\n    <ContactForm />\n    <h2>Contacts</h2>\n    <Filter />\n    {isLoading && <Loader />}\n    {items && !isLoading && <ContactList />}\n    {error && <p>Error</p>}\n    </Container>\n    </main>\n    );\n};\n\nexport default Contacts;"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","ErrorMessage","FormikErrorMessage","_templateObject2","FormField","_templateObject3","FieldInput","Field","_templateObject4","SubmitButton","_templateObject5","ListContainer","StyledList","Contact","Name","Number","ButtonDelete","_templateObject6","getContacts","state","contacts","getFilterValue","filter","ContactList","dispatch","useDispatch","useSelector","visibleContacts","items","item","name","toLowerCase","includes","_jsx","children","map","contact","_jsxs","number","type","onClick","deleteContact","id","validationSchema","Yup","shape","matches","required","ContactForm","Formik","initialValues","onSubmit","values","action","contactExist","some","newContact","_objectSpread","alert","concat","addContact","resetForm","placeholder","component","FilterInput","FilterLabel","Filter","onChange","e","setFilterValue","target","value","Loader","ThreeDots","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","Container","_useSelector","isLoading","error","useEffect","fetchContacts"],"sourceRoot":""}